// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
********************          ********************          ********************
********************          ********************          ******************((
********************          ********************          ***************(((((
********************          ********************          *************(((((((
********************          ********************          **********((((((((((
********************          ********************          ********((((((((((((
********************          ********************          *****(((((((((((((((
********************          ********************          ***(((((((((((((((((
                                                                                
                                                                                
                                                                                
                                                                                
********************          ********************          ((((((((((((((((((((
********************          ******************((          ((((((((((((((((((((
********************          ***************(((((          ((((((((((((((((((((
********************          *************(((((((          ((((((((((((((((((((
********************          **********((((((((((          ((((((((((((((((((((
********************          ********((((((((((((          ((((((((((((((((((((
********************          *****(((((((((((((((          ((((((((((((((((((((
********************          ***(((((((((((((((((          ((((((((((((((((((((
********************                                                            
********************                                                            
********************                                                            
********************                                                            
********************((((((((((((((((((((((((((((((          ((((((((((((((((((((
******************((((((((((((((((((((((((((((((((          ((((((((((((((((((((
***************(((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
*************(((((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
**********((((((((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
********((((((((((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
*****(((((((((((((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
***(((((((((((((((((((((((((((((((((((((((((((((((          ((((((((((((((((((((
 */

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

struct Hero {
    string message;
    uint256 amount;
}

contract OtakuHero {
    
    event Burn(address indexed addr, string message, uint256 amount);

    uint256 public totalBurn = 0;
    mapping (address => Hero) public heroes;

    address immutable moeErc20Address;

    constructor(address _moeErc20Address) {
        moeErc20Address = _moeErc20Address;
    }

    function moeMoeKyun(uint256 _amount, string memory _message) public {
        ERC20 moeErc20 = ERC20(moeErc20Address);
        require(moeErc20.balanceOf(msg.sender) >= _amount, "MOE: insufficient MOE balance");

        moeErc20.transferFrom(msg.sender, address(this), _amount);
        
        uint256 previousBurnAmount = heroes[msg.sender].amount;
        heroes[msg.sender] = Hero(_message, previousBurnAmount + _amount);
        totalBurn = totalBurn + _amount;

        emit Burn(msg.sender, _message, _amount);
    }
}